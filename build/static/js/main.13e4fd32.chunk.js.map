{"version":3,"sources":["todo/actions.js","todo/reducers.js","App.js","todo/ListItem.js","todo/thunks.js","todo/selectors.js","todo/NewTodoForm.js","todo/TodoList.js","store.js","index.js"],"names":["CREATE_THE_STUFF_TODO","createStuffTodo","reduceTodo","type","payload","REMOVE_THE_STUFF_TODO","removeStuffTodo","FINISH_THE_STUFF_TODO","finishStuffTodo","LOAD_THE_STUFF_TODO_WITH_PROGRSSION","loadTheStuffTodoProgress","LOAD_THE_STUFF_TODO_TRUE_SUCCESS","loadTheStuffTodoTrueSuccess","LOAD_THE_STUFF_TODO_PAINFUL_FAILURE","loadTheStuffTodoPainfulFailure","selectorInitialState","isLoadingThatTodo","todoListHoldingReduceTodo","state","action","concat","removeThatTodoStuffPlease","filter","removeTodo","id","finishThatTodoStuffPlease","map","itemTodo","hot","module","ListItemWrapper","styled","div","ListItemWrapperWithWarning","dateProps","startingdate","Date","todoCreatedDate","currentdate","now","ListItem","onRemovePressedOfLI","onFinishPressedLI","CompletedContainer","isCompleted","createdAt","text","toLocaleDateString","className","onClick","ENDPOINT","thunkDisplayAlert","alert","selectorGetIsLoadingThatTodo","selectorGetReduceTodo","reselectGetIncompleteReduceTodo","createSelector","individualTodo","reselectGetCompleteReduceTodo","connect","reduceTodoCreate","dispatch","onCreatePressed","addingText","a","body","JSON","stringify","fetch","headers","method","response","json","insertedTodo","useState","inputForNew","setInputForNEw","value","onChange","e","target","placeholder","some","itemintodo","reduceCompleteTodo","reduceIncompleteTodo","onRemovePressed","removedTodo","thunkRemoveThatTodo","onFinishPressed","updatedTodo","thunkFinishThatTodo","startLoadingToDoNowOhYeah","getState","useEffect","console","log","thunkLoadingMessage","thunkContent","onethingtodo","key","todoReduce","persistConfig","storage","stateReconciler","autoMergeLevel2","rootTodoReduce","combineReducers","persistTodoReduce","persistReducer","indexStore","createStore","composeWithDevTools","applyMiddleware","thunk","indexPersistor","persistStore","ReactDOM","render","store","loading","persistor","App","document","getElementById"],"mappings":"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","file":"static/js/main.13e4fd32.chunk.js","sourcesContent":["//naming of this file is due to the redux naming convention\r\n\r\nimport { reduceTodo } from \"./reducers\";\r\n\r\n//action type\r\nexport const CREATE_THE_STUFF_TODO='CREATE_THE_STUFF_TODO';\r\n//action creator\r\n//before thunk and server is the same as after\r\nexport const createStuffTodo=reduceTodo=>({\r\n    type:CREATE_THE_STUFF_TODO,\r\npayload: {reduceTodo}\r\n});\r\n\r\n//action type\r\nexport const REMOVE_THE_STUFF_TODO='REMOVE_THE_STUFF_TODO';\r\n//action creator\r\n//before thunk and server\r\n/*export const removeStuffTodo=text=>({\r\n    type:REMOVE_THE_STUFF_TODO,\r\n    payload: {text}\r\n});*/\r\n//after thunk and server\r\n//the item deleted will remain deleted even when the page restart, it will only reset when the server restart\r\nexport const removeStuffTodo=reduceTodo=>({\r\n    type:REMOVE_THE_STUFF_TODO,\r\n    payload: {reduceTodo}\r\n});\r\n\r\n\r\nexport const FINISH_THE_STUFF_TODO='FINISH_THE_STUFF_TODO';\r\n//action creator\r\nexport const finishStuffTodo=/*(text, isCompleted)*/reduceTodo=>(\r\n    /*console.log(isCompleted),*/{\r\n    type:FINISH_THE_STUFF_TODO,\r\n    //payload: {text, isCompleted}\r\n    payload: {reduceTodo}\r\n});\r\n\r\nexport const LOAD_THE_STUFF_TODO_WITH_PROGRSSION='LOAD_THE_STUFF_TODO_WITH_PROGRSSION';\r\n//action creator\r\nexport const loadTheStuffTodoProgress=()=>(\r\n    {\r\n    type:LOAD_THE_STUFF_TODO_WITH_PROGRSSION,\r\n});\r\n\r\nexport const LOAD_THE_STUFF_TODO_TRUE_SUCCESS='LOAD_THE_STUFF_TODO_TRUE_SUCCESS';\r\n//action creator\r\nexport const loadTheStuffTodoTrueSuccess=reduceTodo=>(\r\n    {\r\n    type:LOAD_THE_STUFF_TODO_TRUE_SUCCESS,\r\n    payload:{reduceTodo},\r\n});\r\n\r\nexport const LOAD_THE_STUFF_TODO_PAINFUL_FAILURE='LOAD_THE_STUFF_TODO_PAINFUL_FAILURE';\r\n//action creator\r\nexport const loadTheStuffTodoPainfulFailure=()=>(\r\n    {\r\n    type:LOAD_THE_STUFF_TODO_PAINFUL_FAILURE,\r\n});","//naming of this file is due to the redux naming convention\r\n/*any time any action is fired from anywhere in application,\r\nreducer will get called. The 2 argument that will be passed to a reducer\r\nare current state of the resources that the reducer is managing and\r\nthe action that was triggered.\r\nThen redux will decide what changes should occur in the state as result of this action.\r\nThen return the updated state, Redux will take this return value and set current state to that*/\r\nimport { CREATE_THE_STUFF_TODO,\r\n     REMOVE_THE_STUFF_TODO, \r\n     FINISH_THE_STUFF_TODO, \r\n     LOAD_THE_STUFF_TODO_WITH_PROGRSSION,\r\n     LOAD_THE_STUFF_TODO_TRUE_SUCCESS,\r\n     LOAD_THE_STUFF_TODO_PAINFUL_FAILURE} from './actions.js';\r\n\r\n//before this, reduceTodo is stored in reduceTodo, isLoadingThatTodo is stored in isLoadingThatTodo\r\n//now both of it is a part of selectorInitialState. reduceTodo now part of selectorInitialState.todoListHoldingReduceTodo\r\n//isLoadingThatTodo now part of selectorInitialState.isLoadingThatTodo\r\nconst selectorInitialState={isLoadingThatTodo: false, todoListHoldingReduceTodo: []}\r\n\r\n//reducer\r\n/*export const isLoadingThatTodo=(state=selectorInitialState, action)=>{\r\n    const {type}=action;\r\n    switch(type){\r\n        case LOAD_THE_STUFF_TODO_WITH_PROGRSSION:{\r\n            return true;\r\n        }\r\n        case LOAD_THE_STUFF_TODO_TRUE_SUCCESS:{\r\n            return false;\r\n        }\r\n        case LOAD_THE_STUFF_TODO_PAINFUL_FAILURE:{\r\n            return false;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}*/\r\n//another reducer\r\nexport const reduceTodo= (state =selectorInitialState, action)=>{\r\n    const {type, payload }=action;\r\n\r\n    switch(type){\r\n        //before thunk and server\r\n        /*case CREATE_THE_STUFF_TODO:{\r\n            const {text}=payload;\r\n            const newStuffWithTextTodo={\r\n                text,\r\n                isCompleted:false\r\n            }\r\n            //concat doesn't mutate\r\n            return state.concat(newStuffWithTextTodo);\r\n        }\r\n        \r\n        case REMOVE_THE_STUFF_TODO:{\r\n            const {text}=payload;\r\n            return state.filter(removeTodo=>removeTodo.text!==text);\r\n        }*/\r\n        //after thunk and server\r\n        case CREATE_THE_STUFF_TODO:{\r\n            const {reduceTodo}=payload;\r\n            return {...state,\r\n                todoListHoldingReduceTodo:\r\n                state.todoListHoldingReduceTodo.concat(reduceTodo)};\r\n        }\r\n        case REMOVE_THE_STUFF_TODO:{\r\n            const {reduceTodo:removeThatTodoStuffPlease}=payload;\r\n            return {...state,\r\n                todoListHoldingReduceTodo:\r\n                state.todoListHoldingReduceTodo.filter(removeTodo=>\r\n                    removeTodo.id!==removeThatTodoStuffPlease.id)};\r\n        }\r\n        case FINISH_THE_STUFF_TODO:{\r\n            const {reduceTodo:finishThatTodoStuffPlease}=payload;\r\n            //itemTodo in ListItem\r\n            return {...state,\r\n                todoListHoldingReduceTodo: \r\n                state.todoListHoldingReduceTodo.map(itemTodo=>{\r\n                if(itemTodo.id===finishThatTodoStuffPlease.id){\r\n                    return finishThatTodoStuffPlease;\r\n                }\r\n                return itemTodo;\r\n            }),};\r\n           /* old clunky but that works\r\n           const {text, isCompleted}=payload;\r\n            \r\n            const tempStuffTodo={\r\n                text:text,\r\n                isCompleted:true,\r\n            }\r\n            return state.filter(finishTodo=>finishTodo.text!==text&&finishTodo.isCompleted!==isCompleted).concat(tempStuffTodo);*/\r\n        }\r\n        case LOAD_THE_STUFF_TODO_WITH_PROGRSSION:{\r\n            return {...state, isLoadingThatTodo:true};\r\n        }\r\n        case LOAD_THE_STUFF_TODO_TRUE_SUCCESS:{\r\n            const {reduceTodo} = payload;\r\n            return {...state,\r\n                isLoadingThatTodo:false,\r\n                todoListHoldingReduceTodo:reduceTodo,}\r\n        }\r\n        case LOAD_THE_STUFF_TODO_PAINFUL_FAILURE:{\r\n            return {...state, isLoadingThatTodo:false};\r\n        }\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n    \r\n    \r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { hot } from 'react-hot-loader';\r\nimport TodoList from './todo/TodoList'\r\n\r\nconst App=()=>{\r\n    return(\r\n    <div>\r\n        <TodoList />\r\n    </div>\r\n    )\r\n}\r\nexport default hot(module)(App);","import React from 'react';\r\nimport styled from 'styled-components';\r\n//8640000 second=1 day\r\n//if dateprop is less recent than 5 days from today, highlight it red\r\n\r\n//this is best for testing. Also good code practice to put logic inside method for reuse\r\nexport const getBorderDateForTest=(startingdate, currentdate)=>{\r\n    return(startingdate>new Date(currentdate-8640000*5)\r\n    ?'none':'3px solid red');\r\n}\r\n\r\nconst ListItemWrapper=styled.div`\r\n    \r\n    `;\r\nconst ListItemWrapperWithWarning=styled(ListItemWrapper)`\r\n    border-bottom: ${dateProps=>getBorderDateForTest(new Date(dateProps.todoCreatedDate), Date.now())};\r\n`;\r\n const ListItem =({itemTodo, onRemovePressedOfLI, onFinishPressedLI})=>{\r\n    const CompletedContainer=itemTodo.isCompleted?ListItemWrapper:ListItemWrapperWithWarning;\r\n    return(\r\n        <CompletedContainer todoCreatedDate={itemTodo.createdAt}>\r\n            <h3>{itemTodo.text}</h3>\r\n            <p>Created At: &nbsp; \r\n                {(new Date(itemTodo.createdAt)).toLocaleDateString()}\r\n            </p>\r\n            <div className=\"button-container\">\r\n            {itemTodo.isCompleted?null:<button onClick={()=>onFinishPressedLI(itemTodo.id/*, itemTodo.isCompleted*/)}\r\n            className=\"complete-container\">Mark as Completed</button>}\r\n            <button onClick={()=>onRemovePressedOfLI(itemTodo.id)}\r\n            className=\"remove-container\">Remove</button>\r\n            </div>\r\n        </CompletedContainer>\r\n    )\r\n}\r\nexport default ListItem;","//basically a function that return another function, so high order func?\r\n//dispatch thunk is nearly identical to how dispatch an actions\r\nimport{loadTheStuffTodoProgress,\r\n    loadTheStuffTodoTrueSuccess,\r\n    loadTheStuffTodoPainfulFailure,\r\n    createStuffTodo, \r\n    removeStuffTodo,\r\n    finishStuffTodo} from './actions';\r\n\r\nconst ENDPOINT=\"https://productivity-app-server.herokuapp.com/\";\r\n\r\nexport const thunkLoadStuffTodo=()=>\r\nasync(dispatch, getState)=>{\r\n    try{\r\n    dispatch(loadTheStuffTodoProgress());\r\n    //the reduceTodo at the end of fetch('http://localhost:8080/reduceTodo') can only be change by entering the server and change it there\r\n    //at server.js in react-ecosystem-server\r\n    //http://localhost:8080/reduceTodo\r\n    const response =await fetch(`${ENDPOINT}/reduceTodo`);\r\n    const reduceTodo=await response.json();\r\n\r\n    dispatch(loadTheStuffTodoTrueSuccess(reduceTodo));\r\n    }\r\n    catch(e){\r\n    dispatch(loadTheStuffTodoPainfulFailure());\r\n    dispatch(thunkDisplayAlert(e));\r\n    }\r\n}\r\n\r\nexport const thunkCreateThatTodo=text=>\r\nasync dispatch=>{\r\n    try{\r\n        //body is a return props in server.js post method\r\n        const body=JSON.stringify({text});\r\n        const response =await fetch(`${ENDPOINT}/reduceTodo/`,{\r\n            headers:{'Content-Type': 'application/json',},\r\n            method:'post',\r\n            body,});\r\n        //insertedTodo is in server.js\r\n        const insertedTodo=await response.json();\r\n        dispatch(createStuffTodo(insertedTodo));\r\n    }\r\n    catch(e){\r\n        dispatch(thunkDisplayAlert(e));\r\n    }\r\n}\r\n\r\n\r\n//id is a field return in react-ecosystem-server/server.js\r\nexport const thunkRemoveThatTodo=id=>\r\nasync dispatch=>{\r\n    try{\r\n        \r\n        const response =await fetch(`${ENDPOINT}/reduceTodo/${id}`,{method:'delete'});\r\n        //removedtodo is in server.js\r\n        const removedTodo=await response.json();\r\n        dispatch(removeStuffTodo(removedTodo));\r\n    }\r\n    catch(e){\r\n        dispatch(thunkDisplayAlert(e));\r\n    }\r\n}\r\n\r\nexport const thunkFinishThatTodo=id=>\r\nasync dispatch=>{\r\n    try{\r\n        const response =await fetch(`${ENDPOINT}/reduceTodo/${id}/completed`,{ method:'post'});\r\n        //updatedTodo is in server.js\r\n        const updatedTodo=await response.json();\r\n        //remember to change the method here. Almost still keep it as createStuffTodo\r\n        dispatch(finishStuffTodo(updatedTodo));\r\n    }\r\n    catch(e){\r\n        dispatch(thunkDisplayAlert(e));\r\n    }\r\n}\r\n\r\nexport const thunkDisplayAlert =(text)=>{\r\n    alert(`The error is: ${text}`);\r\n}","import {createSelector} from 'reselect';\r\n\r\nexport const selectorGetIsLoadingThatTodo=state=> state.reduceTodo.isLoadingThatTodo;\r\nexport const selectorGetReduceTodo=state=> state.reduceTodo.todoListHoldingReduceTodo;\r\n\r\n\r\n//these high order selector have no idea how data is format in redux store\r\n//rely on selectorGetIsLoadingThatTodo or selectorGetReduceTodo to get the\r\n//exact format of data in redux=>best practice to define lots of getter \r\nexport const reselectGetIncompleteReduceTodo=createSelector(\r\n    selectorGetReduceTodo,\r\n    //this is incorrect. don't put {} cause it will break\r\n    //(todoListHoldingReduceTodo)=>{todoListHoldingReduceTodo.filter(individualTodo=>!individualTodo.isCompleted)}\r\n    (todoListHoldingReduceTodo)=>todoListHoldingReduceTodo.filter(individualTodo=>!individualTodo.isCompleted)\r\n);\r\n\r\n//createSelector doesn't recompute like when passing a whole state as the argument\r\n//createSelector (return value) only change when (return value of arument selector) change=>less computation\r\nexport const reselectGetCompleteReduceTodo=createSelector(\r\n    selectorGetReduceTodo,\r\n    (todoListHoldingReduceTodo)=>todoListHoldingReduceTodo.filter(individualTodo=>individualTodo.isCompleted)\r\n    \r\n);","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {createStuffTodo} from './actions';\r\nimport {thunkCreateThatTodo} from './thunks';\r\nimport { selectorGetReduceTodo} from './selectors';\r\n\r\n//props much match the mapStateToProps of reducer\r\nconst NewTodoForm =({reduceTodoCreate, onCreatePressed})=>{\r\n    const [inputForNew, setInputForNEw]=useState('');\r\n    \r\n    return(\r\n    <div className=\"NewTodoForm\">\r\n        <input className=\"NewTodoInput\" type=\"text\" value={inputForNew} onChange={e=>setInputForNEw(e.target.value)} placeholder=\"What's the new todo stuff, amigi?\"/>\r\n        <button\r\n         onClick={()=>{\r\n             const isDup=reduceTodoCreate.some(itemintodo=>itemintodo.text===inputForNew);\r\n             if(!isDup){\r\n                onCreatePressed(inputForNew);\r\n                setInputForNEw('');\r\n             }\r\n         }}\r\n         className=\"NewTodoButton\">Create</button>\r\n    </div>\r\n    )\r\n}\r\nconst mapStateToProps = state =>({\r\n    reduceTodoCreate:selectorGetReduceTodo(state),\r\n});\r\nconst mapDispatchToProps = dispatch=>({\r\nonCreatePressed: addingText=> dispatch(thunkCreateThatTodo(addingText)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewTodoForm);","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport ListItem from './ListItem.js';\r\nimport NewTodoForm from './NewTodoForm.js';\r\nimport styled from 'styled-components';\r\nimport {selectorGetIsLoadingThatTodo, \r\n    reselectGetIncompleteReduceTodo,\r\n    reselectGetCompleteReduceTodo} from './selectors';\r\nimport {removeStuffTodo, finishStuffTodo} from './actions.js';\r\nimport {thunkDisplayAlert, thunkLoadStuffTodo, thunkRemoveThatTodo, thunkFinishThatTodo} from './thunks';\r\nimport './TodoList.css';\r\nimport { isLoadingThatTodo } from './reducers.js';\r\n\r\nconst DivWrapper=styled.div``;\r\n\r\n//props much match the mapStateToProps of reducer\r\n//becareful of the ({}) misplacement. Wasted 4h for misplacing }\r\nconst TodoList=({reduceCompleteTodo =[],reduceIncompleteTodo=[], onRemovePressed, onFinishPressed, isLoadingThatTodo, startLoadingToDoNowOhYeah})=>{\r\n    //the empty array at the end is a parameter to help the page stop continuously loading\r\n\r\n    useEffect(()=>{startLoadingToDoNowOhYeah();}, [])\r\n    console.log(reduceIncompleteTodo);\r\n    const thunkLoadingMessage=<div>Thunk loading and stuff...</div>\r\n    const thunkContent=(\r\n        <div className=\"div-wrapper\">\r\n            <NewTodoForm />\r\n            <h3>Incomplete</h3>\r\n            {reduceIncompleteTodo.map((onethingtodo, id)=><ListItem itemTodo={onethingtodo} \r\n                                                          key={id} \r\n                                                          onRemovePressedOfLI={onRemovePressed}\r\n                                                          onFinishPressedLI={onFinishPressed}/>)}\r\n            <h3>Complete</h3>\r\n            {reduceCompleteTodo.map((onethingtodo, id)=><ListItem itemTodo={onethingtodo} \r\n                                                          key={id} \r\n                                                          onRemovePressedOfLI={onRemovePressed}\r\n                                                          onFinishPressedLI={onFinishPressed}/>)}\r\n        </div>\r\n    )\r\n    return isLoadingThatTodo? thunkLoadingMessage:thunkContent;\r\n}\r\nconst mapStateToProps=state=>({\r\n    isLoadingThatTodo: selectorGetIsLoadingThatTodo(state),\r\n    reduceCompleteTodo: reselectGetCompleteReduceTodo(state),\r\n    reduceIncompleteTodo: reselectGetIncompleteReduceTodo(state),\r\n})\r\nconst mapDispatchToProps= dispatch=>({\r\n    //before thunk and server\r\n    /*onRemovePressed: deletingText=>dispatch(removeStuffTodo(deletingText)),*/\r\n    //after thunk and server\r\n    onRemovePressed: id=>dispatch(thunkRemoveThatTodo(id)),\r\n    //onFinishPressed: (finishingText, isCompleted) =>dispatch(finishStuffTodo(finishingText, isCompleted)),\r\n    onFinishPressed: id =>dispatch(thunkFinishThatTodo(id)),\r\n    startLoadingToDoNowOhYeah: ()=>dispatch(thunkLoadStuffTodo()),\r\n\r\n})\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport {reduceTodo} from './todo/reducers';\r\nimport {persistReducer} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport thunk from 'redux-thunk';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\n\r\n//naming of this file is due to the redux naming convention\r\n//a constant to hold all the reducers that will be defined later on\r\nconst todoReduce ={ reduceTodo };\r\n\r\n//autoMergeLevel2 tell Redux Persist how to reconcile the initial and stored state of application,\r\n//as in how deep it should go (level 2)\r\nconst persistConfig={\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: autoMergeLevel2,\r\n}\r\n\r\n//put all reducers to a form that can be used to pass to createStore\r\nconst rootTodoReduce=combineReducers(todoReduce);\r\n\r\n//persistConfig tell redux persist how to save and where to store data\r\n//persist reducer\r\n//the key idea of this one is to store the data on browser's application's local storage\r\n//this help so that when THE CODE IS RUNNING and THE USER REFRESH, the data is stored\r\n//when the CODE IS NOT RUNNING, IT WILL STILL STORED on the browser, wth, lmao\r\nconst persistTodoReduce =persistReducer(persistConfig, rootTodoReduce)\r\n\r\n//issue with @babel/runtime was fixed by reinstall with yarn add @abel/runtime\r\n//instead of root reducer, now pass persist reducer\r\nexport const configureStore =()=>createStore(\r\n    persistTodoReduce,\r\n    //instead of dev tool, will use thunk with dev tool\r\n    /*window.__REDUX_DEVTOOLS_EXTENSION__&&\r\n    window.__REDUX_DEVTOOLS_EXTENSION__(),*/\r\n    composeWithDevTools(\r\n        applyMiddleware(thunk)\r\n    ));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider } from 'react-redux';\r\nimport {configureStore} from './store';\r\nimport {persistStore} from 'redux-persist';\r\nimport {PersistGate} from 'redux-persist/lib/integration/react';\r\nimport App from './App.js';\r\n\r\n\r\n//issue with @babel/runtime was fixed by reinstall with yarn add @abel/runtime\r\nconst indexStore=configureStore();\r\nconst indexPersistor=persistStore(indexStore);\r\nReactDOM.render(\r\n    <Provider store={indexStore}>\r\n        <PersistGate \r\n                    loading={<div>Loading...</div>}\r\n                    persistor={indexPersistor}>\r\n        <App />\r\n        </PersistGate>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n    )\r\n"],"sourceRoot":""}